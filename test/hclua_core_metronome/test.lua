local lu = dofile('../../src/hclua/vendor/luaunit/luaunit.lua')
local runtime = dofile('../../src/hclua/runtime/runtime.lua')
runtime.Path = '../../src/hclua/'
local rt = runtime.Runtime:new()
local metronome = rt:requireModule('core/metronome/metronome.lua')

local sender = {}
sender.__index = sender

function sender:new()
    local s = {
        sent = {}
    }
    setmetatable(s, self)
    return s
end

function sender:send(data)
    table.insert(self.sent, data)
end

function sender:reset()
    self.sent = {}
end

function sender:toString()
    return table.concat(self.sent, ';')
end

local timer = {}
timer.__index = timer
function timer:new()
    local t = {
        _time = 0
    }
    setmetatable(t, self)
    return t
end

function timer:getTime()
    return self._time
end

function timer:withTime(t)
    self._time = t
    return self
end

function timer:sleep(t)
    self._time = self._time + t
end

local function formatQueue(m)
    local q = {}
    for index, value in ipairs(m:queue()) do
        for index2, value2 in ipairs(value) do
            table.insert(q, value2)
        end
    end
    return table.concat(q, ';')
end

function TestMetronomeNew()
    local m = metronome.new()
    lu.assertEquals(m:getBeats(), metronome.DefaultBeats())
    lu.assertEquals(m:getTick(), metronome.DefaultTick())
    m:withTick(-1000):withBeats(-10)
    lu.assertEquals(m:space(), metronome.DefaultBeats())
    lu.assertEquals(m:getBeats(), metronome.DefaultBeats())
    lu.assertEquals(m:getTick(), metronome.DefaultTick())
    m:withTick(500):withBeats(10)
    lu.assertEquals(m:getBeats(), 10)
    lu.assertEquals(m:getTick(), 500)
    lu.assertEquals(m:space(), 10)
end

function TestMetronomePlay()
    local t = timer:new()
    local s = sender:new()
    local m = metronome.new()
    m:withTick(500):withBeats(4)
    m._timer = function() return t:getTime() end
    m._sender = function(metronome, data)
        s:send(data)
    end
    lu.assertEquals(s:toString(), '')
    lu.assertEquals(m:space(), 4)
    lu.assertEquals(formatQueue(m), '')
    m:push({ "1", "2", "3", "4" }, false)
    lu.assertEquals(s:toString(), '1;2;3;4')
    lu.assertEquals(formatQueue(m), '')
    lu.assertEquals(m:space(), 0)
    m:play()
    lu.assertEquals(s:toString(), '1;2;3;4')
    m:push({ "5", "6" }, false)
    lu.assertEquals(s:toString(), '1;2;3;4')
    lu.assertEquals(formatQueue(m), '5;6')
    t:sleep(500)
    m:play()
    t:sleep(1)
    lu.assertEquals(m:space(), 4)
    m:play()
    lu.assertEquals(s:toString(), '1;2;3;4;5;6')
    lu.assertEquals(m:space(), 2)
    m:push({ "7", "8", "9" }, true)
    m:push({ "10", "11", "12", "13" }, true)
    m:push({ "15" })
    lu.assertEquals(s:toString(), '1;2;3;4;5;6')
    lu.assertEquals(formatQueue(m), '7;8;9;10;11;12;13;15')
    lu.assertEquals(m:space(), 2)
    t:sleep(501)
    lu.assertEquals(m:space(), 4)
    m:play()
    lu.assertEquals(s:toString(), '1;2;3;4;5;6;7;8;9')
    lu.assertEquals(formatQueue(m), '10;11;12;13;15')
    lu.assertEquals(m:space(), 1)
    t:sleep(501)
    m:play()
    lu.assertEquals(s:toString(), '1;2;3;4;5;6;7;8;9;10;11;12;13')
    lu.assertEquals(formatQueue(m), '15')
    lu.assertEquals(m:space(), 0)
    m:send('14')
    lu.assertEquals(s:toString(), '1;2;3;4;5;6;7;8;9;10;11;12;13;14')
    lu.assertEquals(formatQueue(m), '15')
    lu.assertEquals(m:space(), 0)
    t:sleep(501)
    m:play()
    lu.assertEquals(s:toString(), '1;2;3;4;5;6;7;8;9;10;11;12;13;14;15')
    lu.assertEquals(m:space(), 3)
    lu.assertEquals(formatQueue(m), '')
    m:push({'16','17','18','19','20'},true)
    lu.assertEquals(s:toString(), '1;2;3;4;5;6;7;8;9;10;11;12;13;14;15')
    lu.assertEquals(m:space(), 3)
    lu.assertEquals(formatQueue(m), '16;17;18;19;20')
    t:sleep(501)
    m:play()
    lu.assertEquals(s:toString(), '1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), '')
    s:reset()
    m:reset()
    lu.assertEquals(s:toString(), '')
    lu.assertEquals(m:space(), 4)
    lu.assertEquals(formatQueue(m), '')
    m:push({'test'})
    lu.assertEquals(s:toString(), 'test')
    lu.assertEquals(m:space(), 3)
    lu.assertEquals(formatQueue(m), '')
    s:reset()
    lu.assertEquals(s:toString(), '')
    m:push({ 'a', 'b', 'c', 'd' }, true)
    m:push({ 'e', 'f' }, true)
    lu.assertEquals(s:toString(), '')
    lu.assertEquals(m:space(), 3)
    lu.assertEquals(formatQueue(m), 'a;b;c;d;e;f')
    m:reset()
    lu.assertEquals(s:toString(), 'a;b;c;d')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), 'e;f')
    m:discard()
    lu.assertEquals(s:toString(), 'a;b;c;d')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), '')
    t:sleep(501)
    lu.assertEquals(s:toString(), 'a;b;c;d')
    lu.assertEquals(m:space(), 4)
    lu.assertEquals(formatQueue(m), '')
end

function TestMetronomeInsert()
    local t = timer:new()
    local s = sender:new()
    local m = metronome.new()
    m:withTick(500):withBeats(4)
    m._timer = function() return t:getTime() end
    m._sender = function(metronome, data)
        s:send(data)
    end
    m:insert({'1','2','3','4','6'})
    lu.assertEquals(s:toString(), '1;2;3;4')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), '6')
    m:insert({'5'})
    lu.assertEquals(s:toString(), '1;2;3;4')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), '5;6')
    t:sleep(501)
    m:play()
    lu.assertEquals(s:toString(), '1;2;3;4;5;6')
    lu.assertEquals(m:space(), 2)
    lu.assertEquals(formatQueue(m), '')
    m:insert({'7','8','9','10','11'},true)
    lu.assertEquals(s:toString(), '1;2;3;4;5;6')
    lu.assertEquals(m:space(), 2)
    lu.assertEquals(formatQueue(m), '7;8;9;10;11')
    t:sleep(501)
    m:play()
    lu.assertEquals(s:toString(), '1;2;3;4;5;6;7;8;9;10;11')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), '')

end
function TestMetronomeFull()
    local t = timer:new()
    local s = sender:new()
    local m = metronome.new()
    m:withTick(500):withBeats(4)
    m._timer = function() return t:getTime() end
    m._sender = function(metronome, data)
        s:send(data)
    end
    m:push({ "1", "2" }, false)
    lu.assertEquals(s:toString(), '1;2')
    lu.assertEquals(m:space(), 2)
    lu.assertEquals(formatQueue(m), '')
    t:sleep(250)
    m:push({ "3", "4" }, false)
    lu.assertEquals(s:toString(), '1;2;3;4')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), '')
    t:sleep(251)
    lu.assertEquals(s:toString(), '1;2;3;4')
    lu.assertEquals(m:space(), 2)
    lu.assertEquals(formatQueue(m), '')
    m:push({ "5", "6","7"}, false)
    lu.assertEquals(s:toString(), '1;2;3;4;5;6')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), '7')
    t:sleep(250)
    m:play()
    lu.assertEquals(s:toString(), '1;2;3;4;5;6;7')
    lu.assertEquals(m:space(), 1)
    lu.assertEquals(formatQueue(m), '')
    t:sleep(501)
    m:play()
    s:reset()
    lu.assertEquals(s:toString(), '')
    lu.assertEquals(m:space(), 4)
    lu.assertEquals(formatQueue(m), '')
    m:push({ "a", "b"}, false)
    lu.assertEquals(s:toString(), 'a;b')
    lu.assertEquals(m:space(), 2)
    lu.assertEquals(formatQueue(m), '')
    t:sleep(251)
    m:fullTick()
    m:push({"c","d"})
    lu.assertEquals(s:toString(), 'a;b')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), 'c;d')
    t:sleep(250)
    m:play()
    lu.assertEquals(s:toString(), 'a;b;c;d')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), '')
    t:sleep(501)
    m:play()
    lu.assertEquals(s:toString(), 'a;b;c;d')
    lu.assertEquals(m:space(), 4)
    lu.assertEquals(formatQueue(m), '')
    m:push({"e","f"})
    lu.assertEquals(s:toString(), 'a;b;c;d;e;f')
    lu.assertEquals(m:space(), 2)
    lu.assertEquals(formatQueue(m), '')
    t:sleep(251)
    m:full()
    m:push({"g","h"})
    lu.assertEquals(s:toString(), 'a;b;c;d;e;f')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), 'g;h')
    t:sleep(250)
    m:play()
    lu.assertEquals(s:toString(), 'a;b;c;d;e;f')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), 'g;h')
    t:sleep(251-1)
    m:play()
    lu.assertEquals(s:toString(), 'a;b;c;d;e;f')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), 'g;h')
    t:sleep(1)
    m:play()
    lu.assertEquals(s:toString(), 'a;b;c;d;e;f;g;h')
    lu.assertEquals(m:space(), 2)
    lu.assertEquals(formatQueue(m), '')
    
    s:reset()
    m:reset()
    m:play()
    lu.assertEquals(s:toString(), '')
    lu.assertEquals(m:space(), 4)
    lu.assertEquals(formatQueue(m), '')
    m:push({'A'})
    lu.assertEquals(s:toString(), 'A')
    lu.assertEquals(m:space(), 3)
    lu.assertEquals(formatQueue(m), '')
    m:wait(250)
    m:push({'B'})
    lu.assertEquals(s:toString(), 'A')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), 'B')
    t:sleep(250)
    m:play()
    lu.assertEquals(s:toString(), 'A')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), 'B')
    t:sleep(1)
    m:play()
    lu.assertEquals(s:toString(), 'A;B')
    lu.assertEquals(m:space(), 2)
    lu.assertEquals(formatQueue(m), '')
    t:sleep(501-250-1)
    m:play()
    lu.assertEquals(s:toString(), 'A;B')
    lu.assertEquals(m:space(), 3)
    lu.assertEquals(formatQueue(m), '')
    t:sleep(1001-(501-250-1))
    m:play()
    lu.assertEquals(s:toString(), 'A;B')
    lu.assertEquals(m:space(), 4)
    lu.assertEquals(formatQueue(m), '')
    m:wait(0)
    m:play()
    lu.assertEquals(s:toString(), 'A;B')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), '')
    t:sleep(1)
    m:play()
    lu.assertEquals(s:toString(), 'A;B')
    lu.assertEquals(m:space(), 4)
    lu.assertEquals(formatQueue(m), '')
    m:push({"C"})
    m:wait(1000)
    m:push({"D"})
    lu.assertEquals(s:toString(), 'A;B;C')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), 'D')
    t:sleep(501)
    m:play()
    lu.assertEquals(s:toString(), 'A;B;C')
    lu.assertEquals(m:space(), 0)
    lu.assertEquals(formatQueue(m), 'D')
    t:sleep(1001-501)
    m:play()
    lu.assertEquals(s:toString(), 'A;B;C;D')
    lu.assertEquals(m:space(), 3)
    lu.assertEquals(formatQueue(m), '')
end
os.exit(lu.LuaUnit.run())
